        ### ekf config file ###
ekf_filter_node_odom:
        ros__parameters:
                use_sim_time: true
                # The frequency, in Hz, at which the filter will output a position estimate. Note that the filter will not begin
                # computation until it receives at least one message from one of the inputs. It will then run continuously at the
                # frequency specified here, regardless of whether it receives more measurements. Defaults to 30 if unspecified.
                frequency: 9.0

                # The period, in seconds, after which we consider a sensor to have timed out. In this event, we carry out a predict
                # cycle on the EKF without correcting it. This parameter can be thought of as the minimum frequency with which the
                # filter will generate new output. Defaults to 1 / frequency if not specified.
                # sensor_timeout: 0.1

                # ekf_localization_node and ukf_localization_node both use a 3D omnidirectional motion model. If this parameter is
                # set to true, no 3D information will be used in your state estimate. Use this if you are operating in a planar
                # environment and want to ignore the effect of small variations in the ground plane that might otherwise be detected
                # by, for example, an IMU. Defaults to false if unspecified.
                two_d_mode: false

                # Use this parameter to provide an offset to the transform generated by ekf_localization_node. This can be used for
                # future dating the transform, which is required for interaction with some other packages. Defaults to 0.0 if
                # unspecified.
                transform_time_offset: 0.0

                # Use this parameter to provide specify how long the tf listener should wait for a transform to become available. 
                # Defaults to 0.0 if unspecified.
                transform_timeout: 0.0

                # If you're having trouble, try setting this to true, and then echo the /diagnostics_agg topic to see if the node is
                # unhappy with any settings or data.
                print_diagnostics: true

                # Debug settings. Not for the faint of heart. Outputs a ludicrous amount of information to the file specified by
                # debug_out_file. I hope you like matrices! Please note that setting this to true will have strongly deleterious
                # effects on the performance of the node. Defaults to false if unspecified.
                debug: false

                # Defaults to "robot_localization_debug.txt" if unspecified. Please specify the full path.
                debug_out_file: /workspaces/apm_24_9/logs/ekf_log.txt

                # Whether we'll allow old measurements to cause a re-publication of the updated state
                permit_corrected_publication: false

                # Whether to publish the acceleration state. Defaults to false if unspecified.
                publish_acceleration: false

                # Whether to broadcast the transformation over the /tf topic. Defaults to true if unspecified.
                publish_tf: true

                # If the filter sees a jump back in time, the filter is reset (convenient for testing with rosbags!)
                reset_on_time_jump: true

                # gravitational_acceleration: 9.80665

                map_frame: map              # Defaults to "map" if unspecified
                odom_frame: odom            # Defaults to "odom" if unspecified
                base_link_frame: base_link  # Defaults to "base_link" if unspecified
                world_frame: odom           # Defaults to the value of odom_frame if unspecified

                # initial_state: [0.0, 0.0, 0.0,
                #                 0.0, 0.0, 0.0,
                #                 0.0, 0.0, 0.0,
                #                 0.0, 0.0, 0.0,
                #                 0.0, 0.0, 0.0]
                pose0: /rome_ekf_wrapper/hdg_and_alt
                pose0_config: [false,  false,  true,
                                false, false, false,
                                false, false, false,
                                false, false, false,
                                false, false, false]
                pose0_differential: false
                pose0_relative: false
                pose0_queue_size: 50

                twist0: /optical_flow/twist_with_cov
                twist0_config: [false, false, false,
                                false, false, false,
                                true,  true,  false,
                                false, false, false,
                                false, false, false]
                twist0_queue_size: 15
                twist0_rejection_threshold: 0.5

                imu0: /mavros/imu/data
                imu0_config: [false, false, false,
                                 true, true, true,
                                false, false, false,
                                false, false, false,
                                true, true, true]
                # #        [x_pos   , y_pos    , z_pos,
                # #         roll    , pitch    , yaw,
                # #         x_vel   , y_vel    , z_vel,
                # #         roll_vel, pitch_vel, yaw_vel,
                # #         x_accel , y_accel  , z_accel]

                imu0_nodelay: false
                imu0_differential: false
                imu0_relative: false
                imu0_queue_size: 100
                # imu0_pose_rejection_threshold: 1000.0              # Note the difference in parameter names
                # imu0_twist_rejection_threshold: 1000.0                #
                # imu0_linear_acceleration_rejection_threshold: 1000.0  #

                # [ADVANCED] Some IMUs automatically remove acceleration due to gravity, and others don't. If yours doesn't, please set
                # this to true, and *make sure* your data conforms to REP-103, specifically, that the data is in ENU frame.
                imu0_remove_gravitational_acceleration: true

                # [ADVANCED]  The EKF and UKF models follow a standard predict/correct cycle. During prediction, if there is no
                # acceleration reference, the velocity at time t+1 is simply predicted to be the same as the velocity at time t. During
                # correction, this predicted value is fused with the measured value to produce the new velocity estimate. This can be
                # problematic, as the final velocity will effectively be a weighted average of the old velocity and the new one. When
                # this velocity is the integrated into a new pose, the result can be sluggish covergence. This effect is especially
                # noticeable with LIDAR data during rotations. To get around it, users can try inflating the process_noise_covariance
                # for the velocity variable in question, or decrease the  variance of the variable in question in the measurement
                # itself. In addition, users can also take advantage of the control command being issued to the robot at the time we
                # make the prediction. If control is used, it will get converted into an acceleration term, which will be used during
                # predicition. Note that if an acceleration measurement for the variable in question is available from one of the
                # inputs, the control term will be ignored.
                # Whether or not we use the control input during predicition. Defaults to false.
                # use_control: false

                # # Whether the input (assumed to be cmd_vel) is a geometry_msgs/Twist or geometry_msgs/TwistStamped message. Defaults to
                # # false.
                # stamped_control: false

                # # The last issued control command will be used in prediction for this period. Defaults to 0.2.
                # control_timeout: 0.2

                # # Which velocities are being controlled. Order is vx, vy, vz, vroll, vpitch, vyaw.
                # control_config: [true, false, false, false, false, true]

                # # Places limits on how large the acceleration term will be. Should match your robot's kinematics.
                # acceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 3.4]

                # # Acceleration and deceleration limits are not always the same for robots.
                # deceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 4.5]

                # # If your robot cannot instantaneously reach its acceleration limit, the permitted change can be controlled with these
                # # gains
                # acceleration_gains: [0.8, 0.0, 0.0, 0.0, 0.0, 0.9]

                # # If your robot cannot instantaneously reach its deceleration limit, the permitted change can be controlled with these
                # # gains
                # deceleration_gains: [1.0, 0.0, 0.0, 0.0, 0.0, 1.0]

                # [ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is
                # exposed as a configuration parameter. This matrix represents the noise we add to the total error after each
                # prediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.
                # However, if users find that a given variable is slow to converge, one approach is to increase the
                # process_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error
                # to be larger, which will cause the filter to trust the incoming measurement more during correction. The values are
                # ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if
                # unspecified.
                # Note: the specification of covariance matrices can be cumbersome, so all matrix parameters in this package support
                # both full specification or specification of only the diagonal values.
                process_noise_covariance: [0.05, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.05, 0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.06, 0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.03, 0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.03, 0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.06, 0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.025, 0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.025, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.04, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.01, 0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.01, 0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.02, 0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.02, 0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.02, 0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.015]
                                                # [1e-4,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    1e-4,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    1e-4,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    1e-4,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    1e-4,   0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    1e-4,   0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-4,   0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-4,   0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-4,   0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-4,    0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     1e-4,    0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     1e-4,    0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     1e-4,   0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    1e-4,   0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    1e-4]


                # [ADVANCED] If true, will dynamically scale the process_noise_covariance based on the robot’s velocity.
                # This is useful, e.g., when you want your robot’s estimate error covariance to stop growing when the robot is stationary.
                # Defaults to false.
                dynamic_process_noise_covariance: false


                # [ADVANCED] This represents the initial value for the state estimate error covariance matrix. Setting a diagonal
                # value (variance) to a large value will result in rapid convergence for initial measurements of the variable in
                # question. Users should tak1e-4e care not to use large values for variables that will not be measured directly. The values
                # are ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the diagonal values below
                # if unspecified. In this example, we specify only the diagonal of the matrix.
                initial_estimate_covariance: [1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,   0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,    0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     1e-9,    0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     1e-9,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     1e-9,   0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    1e-9,   0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    1e-9]


ekf_filter_node_map:
        ros__parameters:
                use_sim_time: true
                # The frequency, in Hz, at which the filter will output a position estimate. Note that the filter will not begin
                # computation until it receives at least one message from one of the inputs. It will then run continuously at the
                # frequency specified here, regardless of whether it receives more measurements. Defaults to 30 if unspecified.
                frequency: 9.0

                # The period, in seconds, after which we consider a sensor to have timed out. In this event, we carry out a predict
                # cycle on the EKF without correcting it. This parameter can be thought of as the minimum frequency with which the
                # filter will generate new output. Defaults to 1 / frequency if not specified.
                # sensor_timeout: 0.1

                # ekf_localization_node and ukf_localization_node both use a 3D omnidirectional motion model. If this parameter is
                # set to true, no 3D information will be used in your state estimate. Use this if you are operating in a planar
                # environment and want to ignore the effect of small variations in the ground plane that might otherwise be detected
                # by, for example, an IMU. Defaults to false if unspecified.
                two_d_mode: false

                # Use this parameter to provide an offset to the transform generated by ekf_localization_node. This can be used for
                # future dating the transform, which is required for interaction with some other packages. Defaults to 0.0 if
                # unspecified.
                transform_time_offset: 0.0

                # Use this parameter to provide specify how long the tf listener should wait for a transform to become available. 
                # Defaults to 0.0 if unspecified.
                transform_timeout: 0.0

                # If you're having trouble, try setting this to true, and then echo the /diagnostics_agg topic to see if the node is
                # unhappy with any settings or data.
                print_diagnostics: true

                # Debug settings. Not for the faint of heart. Outputs a ludicrous amount of information to the file specified by
                # debug_out_file. I hope you like matrices! Please note that setting this to true will have strongly deleterious
                # effects on the performance of the node. Defaults to false if unspecified.
                debug: true

                # Defaults to "robot_localization_debug.txt" if unspecified. Please specify the full path.
                debug_out_file: /workspaces/apm_24_9/logs/ekf_log.txt

                # Whether we'll allow old measurements to cause a re-publication of the updated state
                permit_corrected_publication: false

                # Whether to publish the acceleration state. Defaults to false if unspecified.
                publish_acceleration: false

                # Whether to broadcast the transformation over the /tf topic. Defaults to true if unspecified.
                publish_tf: true

                # If the filter sees a jump back in time, the filter is reset (convenient for testing with rosbags!)
                reset_on_time_jump: true

                # gravitational_acceleration: 9.80665

                map_frame: map              # Defaults to "map" if unspecified
                odom_frame: odom            # Defaults to "odom" if unspecified
                base_link_frame: base_link  # Defaults to "base_link" if unspecified
                world_frame: map           # Defaults to the value of odom_frame if unspecified
                # base_link_frame_output: map

                # initial_state: [0.0, 0.0, 0.0,
                #                 0.0, 0.0, 0.0,
                #                 0.0, 0.0, 0.0,
                #                 0.0, 0.0, 0.0,
                #                 0.0, 0.0, 0.0]
                pose0: /rome_ekf_wrapper/hdg_and_alt
                pose0_config: [false,  false,  true,
                                false, false, false,
                                false, false, false,
                                false, false, false,
                                false, false, false]
                pose0_differential: false
                pose0_relative: false
                pose0_queue_size: 50

                twist0: /optical_flow/twist_with_cov
                twist0_config: [false, false, false,
                                false, false, false,
                                true,  true,  false,
                                false, false, false,
                                false, false, false]
                twist0_queue_size: 15
                twist0_rejection_threshold: 0.5

                imu0: /mavros/imu/data
                imu0_config: [false, false, false,
                                true, true, true,
                                false, false, false,
                                false, false, false,
                                true, true, true]
                # #        [x_pos   , y_pos    , z_pos,
                # #         roll    , pitch    , yaw,
                # #         x_vel   , y_vel    , z_vel,
                # #         roll_vel, pitch_vel, yaw_vel,
                # #         x_accel , y_accel  , z_accel]

                imu0_nodelay: false
                imu0_differential: false
                imu0_relative: false
                imu0_queue_size: 100
                # imu0_pose_rejection_threshold: 1000.0              # Note the difference in parameter names
                # imu0_twist_rejection_threshold: 1000.0                #
                # imu0_linear_acceleration_rejection_threshold: 1000.0  #

                # [ADVANCED] Some IMUs automatically remove acceleration due to gravity, and others don't. If yours doesn't, please set
                # this to true, and *make sure* your data conforms to REP-103, specifically, that the data is in ENU frame.
                imu0_remove_gravitational_acceleration: true

                odom0: /odometry/gps
                odom0_config: [true,  true,  false,
                                false, false, false,
                                false, false, false,
                                false, false, false,
                                false, false, false]
                odom0_queue_size: 100
                odom0_nodelay: false
                odom0_differential: false
                odom0_relative: false

                # [ADVANCED]  The EKF and UKF models follow a standard predict/correct cycle. During prediction, if there is no
                # acceleration reference, the velocity at time t+1 is simply predicted to be the same as the velocity at time t. During
                # correction, this predicted value is fused with the measured value to produce the new velocity estimate. This can be
                # problematic, as the final velocity will effectively be a weighted average of the old velocity and the new one. When
                # this velocity is the integrated into a new pose, the result can be sluggish covergence. This effect is especially
                # noticeable with LIDAR data during rotations. To get around it, users can try inflating the process_noise_covariance
                # for the velocity variable in question, or decrease the  variance of the variable in question in the measurement
                # itself. In addition, users can also take advantage of the control command being issued to the robot at the time we
                # make the prediction. If control is used, it will get converted into an acceleration term, which will be used during
                # predicition. Note that if an acceleration measurement for the variable in question is available from one of the
                # inputs, the control term will be ignored.
                # Whether or not we use the control input during predicition. Defaults to false.
                # use_control: false

                # # Whether the input (assumed to be cmd_vel) is a geometry_msgs/Twist or geometry_msgs/TwistStamped message. Defaults to
                # # false.
                # stamped_control: false

                # # The last issued control command will be used in prediction for this period. Defaults to 0.2.
                # control_timeout: 0.2

                # # Which velocities are being controlled. Order is vx, vy, vz, vroll, vpitch, vyaw.
                # control_config: [true, false, false, false, false, true]

                # # Places limits on how large the acceleration term will be. Should match your robot's kinematics.
                # acceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 3.4]

                # # Acceleration and deceleration limits are not always the same for robots.
                # deceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 4.5]

                # # If your robot cannot instantaneously reach its acceleration limit, the permitted change can be controlled with these
                # # gains
                # acceleration_gains: [0.8, 0.0, 0.0, 0.0, 0.0, 0.9]

                # # If your robot cannot instantaneously reach its deceleration limit, the permitted change can be controlled with these
                # # gains
                # deceleration_gains: [1.0, 0.0, 0.0, 0.0, 0.0, 1.0]

                # [ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is
                # exposed as a configuration parameter. This matrix represents the noise we add to the total error after each
                # prediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.
                # However, if users find that a given variable is slow to converge, one approach is to increase the
                # process_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error
                # to be larger, which will cause the filter to trust the incoming measurement more during correction. The values are
                # ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if
                # unspecified.
                # Note: the specification of covariance matrices can be cumbersome, so all matrix parameters in this package support
                # both full specification or specification of only the diagonal values.
                process_noise_covariance: [0.05, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.05, 0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.06, 0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.03, 0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.03, 0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.06, 0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.025, 0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.025, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.04, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.01, 0.0,    0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.01, 0.0,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.02, 0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.02, 0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.02, 0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.015]
                                                # [1e-4,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    1e-4,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    1e-4,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    1e-4,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    1e-4,   0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    1e-4,   0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-4,   0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-4,   0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-4,   0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-4,    0.0,     0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     1e-4,    0.0,     0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     1e-4,    0.0,    0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     1e-4,   0.0,    0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    1e-4,   0.0,
                                                #   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    1e-4]


                # [ADVANCED] If true, will dynamically scale the process_noise_covariance based on the robot’s velocity.
                # This is useful, e.g., when you want your robot’s estimate error covariance to stop growing when the robot is stationary.
                # Defaults to false.
                dynamic_process_noise_covariance: false


                # [ADVANCED] This represents the initial value for the state estimate error covariance matrix. Setting a diagonal
                # value (variance) to a large value will result in rapid convergence for initial measurements of the variable in
                # question. Users should tak1e-4e care not to use large values for variables that will not be measured directly. The values
                # are ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the diagonal values below
                # if unspecified. In this example, we specify only the diagonal of the matrix.
                initial_estimate_covariance: [1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,   0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,    0.0,     0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     1e-9,    0.0,     0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     1e-9,    0.0,    0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     1e-9,   0.0,    0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    1e-9,   0.0,
                                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    1e-9]


# ekf_filter_node_map:
#         ros__parameters:

#                 use_sim_time: true

#                 frequency: 9.0
#                 two_d_mode: false
#                 transform_time_offset: 0.0
#                 transform_timeout: 0.0
#                 print_diagnostics: true
#                 debug: false

#                 # Whether to broadcast the transformation over the /tf topic. Defaults to true if unspecified.
#                 publish_tf: true

#                 # If the filter sees a jump back in time, the filter is reset (convenient for testing with rosbags!)
#                 reset_on_time_jump: true

#                 map_frame: map
#                 odom_frame: odom
#                 base_link_frame: base_link
#                 world_frame: map

#                 #     odom0: /odometry/gazebo
#                 #     odom0_config: [true,  true, false,
#                 #                    false, false, false,
#                 #                    false,false,false, 
#                 #                    false, false, false,
#                 #                    false, false, false]
#                 #     odom0_queue_size: 20
#                 #     odom0_nodelay: false
#                 #     odom0_differential: false
#                 #     odom0_relative: false

#                 pose0: /rome_ekf_wrapper/hdg_and_alt
#                 pose0_config: [false,  false,  true,
#                                 false, false, false,
#                                 false, false, false,
#                                 false, false, false,
#                                 false, false, false]
#                 pose0_differential: false
#                 pose0_relative: false
#                 pose0_queue_size: 50

#                 twist0: /optical_flow/twist_with_cov
#                 twist0_config: [false, false, false,
#                                 false, false, false,
#                                 true,  true,  false,
#                                 false, false, false,
#                                 false, false, false]
#                 twist0_queue_size: 15
#                 # twist0_rejection_threshold: 1.0

#                 imu0: /mavros/imu/data
#                 imu0_config: [false, false, false,
#                                 true, true, true,
#                                 false, false, false,
#                                 true, true, true,
#                                 true, true, true]
#                 # #        [x_pos   , y_pos    , z_pos,
#                 # #         roll    , pitch    , yaw,
#                 # #         x_vel   , y_vel    , z_vel,
#                 # #         roll_vel, pitch_vel, yaw_vel,
#                 # #         x_accel , y_accel  , z_accel]

#                 imu0_nodelay: false
#                 imu0_differential: false
#                 imu0_relative: false
#                 imu0_queue_size: 100
#                 # imu0_pose_rejection_threshold: 1000.0              # Note the difference in parameter names
#                 # imu0_twist_rejection_threshold: 1000.0                #
#                 # imu0_linear_acceleration_rejection_threshold: 1000.0  #

#                 # [ADVANCED] Some IMUs automatically remove acceleration due to gravity, and others don't. If yours doesn't, please set
#                 # this to true, and *make sure* your data conforms to REP-103, specifically, that the data is in ENU frame.
#                 imu0_remove_gravitational_acceleration: true
                
#                 # odom0: /odometry/gps
#                 # odom0_config: [true,  true,  false,
#                 #                 false, false, false,
#                 #                 false, false, false,
#                 #                 false, false, false,
#                 #                 false, false, false]
#                 # odom0_queue_size: 100
#                 # odom0_nodelay: false
#                 # odom0_differential: false
#                 # odom0_relative: false

#                 use_control: false

#                 process_noise_covariance: [0.05,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
#                                         0.0,    0.05,   0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
#                                         0.0,    0.0,    0.06,   0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
#                                         0.0,    0.0,    0.0,    0.03,   0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
#                                         0.0,    0.0,    0.0,    0.0,    0.03,   0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
#                                         0.0,    0.0,    0.0,    0.0,    0.0,    0.06,   0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
#                                         0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.025,   0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
#                                         0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.025,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
#                                         0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.04,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
#                                         0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.01,   0.0,    0.0,    0.0,    0.0,    0.0,
#                                         0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.01,   0.0,    0.0,    0.0,    0.0,
#                                         0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.02,   0.0,    0.0,    0.0,
#                                         0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.02,   0.0,    0.0,
#                                         0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.02,   0.0,
#                                         0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.015]

#                 initial_estimate_covariance: [1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
#                                                 0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
#                                                 0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
#                                                 0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
#                                                 0.0,    0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
#                                                 0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
#                                                 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
#                                                 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
#                                                 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,   0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
#                                                 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,    0.0,     0.0,     0.0,    0.0,    0.0,
#                                                 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     1e-9,    0.0,     0.0,    0.0,    0.0,
#                                                 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     1e-9,    0.0,    0.0,    0.0,
#                                                 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     1e-9,   0.0,    0.0,
#                                                 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    1e-9,   0.0,
#                                                 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    1e-9]

navsat_transform:
        ros__parameters:
                use_sim_time: true
                frequency: 5.0
                delay: 7.0
                magnetic_declination_radians: 0.090408055  # For lat/long of 32 34
                yaw_offset: 0.0  # if IMU reads 0 when facing magnetic north instead of east then set parameter to pi/2
                zero_altitude: false
                broadcast_cartesian_transform: true
                broadcast_utm_transform_as_parent_frame: false
                publish_filtered_gps: true
                use_odometry_yaw: false
                datum: [32.22,34.92,61.33]
                wait_for_datum: true


odom_recorder:
        ros__parameters:
                delay: 8.0
